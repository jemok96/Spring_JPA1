mappedBy
order테이블의 member라는 필드에의해 연결됨,
여기 값을 넣는다고 FK값이 변경되는 것이아님, DB에도 실제 값이 생기는 것도 아님 진짜 그냥 읽기전용이다.
읽기전용이다

Order에도 Member의 값이 존재하고
Member에도 order의 값이 있음, 양방향 관계
이 때 어디를 바꿔야 변경이되는지를 설정해주는 것이 연관관계 주인임
== FK값을 업데이트 해야하는 곳
Member를 업데이트 했을 때 변경하자

값 타입은 변경 불가능하게 설계해야한다. @Setter를 제고하고 ,
생성자에서 값을 초기화해서 변경 불가능한 클래스로 만들자

엔티티 설계 주의점
엔티티에는 가급적 Setter를 사용하지 말자
실무에서 모든 연관관계는 지연로딩( LAZY )으로 설정해야 한다. JPQL실행시 N+1문제 발생
컬렉션은 필드에서 초기화 하자.바로 초기화 하는 것이 안전하다

Ctrl + Shift + F : Find In Files
Ctrl + Shift + T : Test Code

주문 서비스의 주문과 주문 취소 메서드를 보면 비즈니스 로직 대부분이 엔티티에 있다. 서비스
계층은 단순히 엔티티에 필요한 요청을 위임하는 역할을 한다. 이처럼 엔티티가 비즈니스 로직을 가지고
객체 지향의 특성을 적극 활용하는 것을 도메인 모델 패턴(http://martinfowler.com/eaaCatalog/
domainModel.html)이라 한다. 반대로 엔티티에는 비즈니스 로직이 거의 없고 서비스 계층에서
대부분의 비즈니스 로직을 처리하는 것을 트랜잭션 스크립트 패턴