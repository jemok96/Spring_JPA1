[1차 캐시]
1.
Member member = new Member();
member.setId(1L);member.setName("jemok");
em.persist(member); // 여기서 영속성 컨텍스트에 저장 됨 DB에 쿼리문을 보낸게 아님

Member findMember = em.find(Member.class, 1L); // 찾을 때도 영속성 컨텍스트에서 찾음 존재하기 때문에 DB조회를 안함
System.out.println("findMember = " + findMember);
System.out.println(" ======== ");
tx.commit(); // 이 때 insert(persist)쿼리문 날라감

2.
1L pk값을 가진 객체가 db에 존재중
Member findMember1 = em.find(Member.class, 1L); //영속성 컨텍스트에 존재하지 않기 때문에 DB조회해서 컨텍스트에 저장 쿼리문 날라감
Member findMember2 = em.find(Member.class, 1L); // 동일한값 또 가져오기 때문에 컨텍스트에서 조회 , DB조회 X
System.out.println(findMember1==findMember2); 동일성 보장, 동일 트랜잭션 내에서

[쓰기 지연]
Member member1 = new Member(2L,"a");
Member member2 = new Member(3L,"b");

em.persist(member1);
em.persist(member2); // 영속성 컨텍스트와 쓰기 지연 SQL에 쌓여있는 상황
tx.commit(); 한번에 쿼리 보냄

[변경 감지]
ember findMember = em.find(Member.class, 2L);
findMember.setName("changeName");
tx.commit();
자바의 컬렉션 즉, 객체 지향과 비슷하다. update문을 날리지 않아도 찾은 후 값변경하면 값이 변경됨

[flush]
영속성 컨텍스트의 변경내용을 데이터베이스에 반영
• 변경 감지
• 수정된 엔티티 쓰기 지연 SQL 저장소에 등록
• 쓰기 지연 SQL 저장소의 쿼리를 데이터베이스에 전송(등록, 수정, 삭제 쿼리)
• em.flush() - 직접 호출
• 트랜잭션 커밋 - 플러시 자동 호출
• JPQL 쿼리 실행 - 플러시 자동 호출
• 영속성 컨텍텍스트를 비우지 않는다.데이터 베이스에 동기화 하는 것이다.