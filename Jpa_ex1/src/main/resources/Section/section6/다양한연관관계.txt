연관관계의 주인은 항상 N쪽에 있다.
@JoinColumn을 지정할 때 무조건 N쪽에 지정
다대일 vs 일대다


N:1(다대일)
데이터베이스의 구조에서도 외래키가 N쪽에 있고, Entity모델에서도 N쪽에 외래키값 @JoinColumn을 지정하는
가장 이상적인 구조

1:N(일대다)
데이터베이스 구조에서는 외래키가 N쪽에 있지만, Entity모델에서는 1쪽이 연관관계의 주인으로, 외래키를 관리해줘야함
즉 Team과 Member가 있을 때  Team과 Member는 DB에서는 Member(N)쪽에 외래키가 있고
Entity모델에서도 Member를 연관관계를 주인으로 지정해야하지만
1:N관계에서는 Entity모델에서 Team쪽을 연관관계의 주인 즉,@JoinColumn을 지정해줘야함
==> Team에서 Member를 알고싶은데 Member쪽에서는 Team을 알고싶지 않을 경우??
물론 양방향 걸 수 있는데 공식적으로 존재하지 않는 방식

일대다 단방향 매핑의 단점
• 엔티티가 관리하는 외래 키가 다른 테이블에 있음
• 연관관계 관리를 위해 추가로 UPDATE SQL 실행
• 객체와 테이블의 차이 때문에 반대편 테이블의 외래 키를 관리하는 특이한 구조
• @JoinColumn을 꼭 사용해야 함. 그렇지 않으면 조인 테이블 방식을 사용함(중간에 테이블을 하나 추가함)

★★★★★★★★★★
일대다 단방향 매핑보다는 다대일 양방향 매핑을 사용하자