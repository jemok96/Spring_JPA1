객체를 테이블에 맞추어 모델링
(참조 대신에 외래 키를 그대로 사용)
@Column(name = "TEAM_ID")
private Long teamId;

@Column(name="TEAM_ID")
private Long id;

 Team저장, Member저장 상태
 Team team = new Team();
 team.setName("TeamA");
 em.persist(team);

 Member member = new Member();
 member.setUsername("member1");
 member.setTeamId(team.getId());
 em.persist(member);

//식별자를 찾아서 다시 조회, 객체 지향적인 방법은 아니다. 탐색하는 과정에서 불편함
 Member findMember = em.find(Member.class, member.getId());
 Long findTeamId = findMember.getTeamId();
 Team findTeam = em.find(Team.class, findTeamId);


테이블은 외래 키로 조인을 사용해서 연관된 테이블을 찾는다
객체는 참조를 사용해서 연관된 객체를 찾음 둘 사이에는 큰 간격이 있음

@ManyToOne
@JoinColumn(name = "TEAM_ID")
private Team team;

Team team = new Team();
team.setName("TeamA");
em.persist(team);

Member member = new Member();
member.setUsername("member1");
member.setTeam(team);
em.persist(member);

//참조를 사용해서 연관관계 조회(객체 지향적인 방법이다.) em.find로 찾고 또 그 값에 대한 객체를 찾는것이 아니라 연쇄적으로 찾을 수 있음
Member findMember = em.find(Member.class, member.getId());
Team findTeam = findMember.getTeam();

