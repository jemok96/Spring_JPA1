엔티티의 생명주기
영속성 컨텍스트 : 하나의 트랜잭션 내에서"엔티티를 영구 저장하는 환경"

비영속
-영속성 컨텍스트와 전혀 관계가 없는 새로운 상태

영속
-영속성 컨텍스트에 관리되는 상태
-애플리케이션과 DB사이에서 객체를 보관하는 논리적 개념, 하나의 트랜잭션 내에서 엔티티를 영구 저장하는 환경
• 1차 캐시
• 동일성(identity) 보장
• 트랜잭션을 지원하는 쓰기 지연(transactional write-behind)
• 변경 감지(Dirty Checking)
• 지연 로딩(Lazy Loading)

준영속 (delete 쿼리 나가지 않음)
-영속 -> 준영속
-영속성 컨텍스트에 저장되었다가 분리된 상태
• em.detach(entity) 특정 엔티티만 준영속 상태로 전환
• em.clear() 영속성 컨텍스트를 완전히 초기화
• em.close() 영속성 컨텍스트를ㅋ종료

삭제
re.remove(member) 객체를 삭제한 상태(delete 쿼리 commit시점에)

객체를 생성한 상태(비영속)
Member member = new Member();
member.setId("member1");
member.setUsername(“회원1”);
EntityManager em = emf.createEntityManager();
em.getTransaction().begin();

객체를 저장한 상태(영속)
em.persist(member);
영속성 컨텍스트에는 @ID값과 Entity가 한 쌍으로 저장 됨 + 스냅샷
DB에 저장 쿼리를 날리지 않음, 영속성 Context에 저장만 된 상태로 commit을 해야 실제 DB에 쿼리가 날라감 or  em.flush()할 경우도

1차 캐시에서 조회(영속 상태) =>em.persist(member)한 상황이므로  1차 캐시에서 바로 가져온다. DB조회 쿼리 X
Member findMember = em.find(Member.class,"member1");

DB에만 member2가있고 영속성 컨텍스트에 없는 상황
1.Member findMember = em.find(Member.class,"member2");
2.DB조회
3.1차 캐시에 저장
4.반환
하지만 한 Transcation안에서만 작동하기 때문에 비즈니스로직이 엄청 많은거아니라면 별다른 이점은 없음


