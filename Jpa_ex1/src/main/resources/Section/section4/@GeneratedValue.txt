IDENTITY 전략 - 특징
• 기본 키 생성을 데이터베이스에 위임
• 주로 MySQL, PostgreSQL, SQL Server, DB2에서 사용(예: MySQL의 AUTO_ INCREMENT)
• JPA는 보통 트랜잭션 커밋 시점에 INSERT SQL 실행
• AUTO_ INCREMENT는 데이터베이스에 INSERT SQL을 실행한 이후에 ID 값을 알 수 있음
• IDENTITY 전략은 em.persist() 시점에 즉시 INSERT SQL 실행하고 DB에서 식별자를 조회
Member member = new Member();
member.setUsername("Jemok");
em.persist(member);   ==> 이 시점에 DB insert문 실행


SEQUENCE 전략 - 특징
• 데이터베이스 시퀀스는 유일한 값을 순서대로 생성하는 특별한 데이터베이스 오브젝트(예: 오라클 시퀀스)
• 오라클, PostgreSQL, DB2, H2 데이터베이스에서 사용
allocationSize : 시퀀스 한 번 호출에 증가하는 수(성능 최적화에 사용됨)  기본값 50

@Entity
@SequenceGenerator(
 name = “MEMBER_SEQ_GENERATOR",
 sequenceName = “MEMBER_SEQ", //매핑할 데이터베이스 시퀀스 이름
 initialValue = 1)
public class Member {
 @Id
 @GeneratedValue(strategy = GenerationType.SEQUENCE,
 generator = "MEMBER_SEQ_GENERATOR")
 private Long id;
. JPA는 allocationSize 만큼의 시퀀스를 미리 받아 이를 메모리에 저장합니다.
그리고 가지고 있는 값을 모두 소진하기 전까진 메모리에서 시퀀스 값을 찾아 사용합니다.
그리고 부족하면 다시 데이터베이스에서 시퀀스를 한 번에 받아옵니다.==>네트워크를 왔다갔다하는 횟수 줄여줌




TABLE 전략  -테이블매핑 전략은 잘 사용하지 않음
키 생성 전용 테이블을 하나 만들어서 데이터베이스 시퀀스를 흉내내는 전략
• 장점: 모든 데이터베이스에 적용 가능
• 단점: 성능
@TableGenerator(
        name = "MEMBER_SEQ_GENERATOR", // 식별자 생성기 이름
        table = "MY_SEQUENCES", // 실제 생성될 table명
        pkColumnValue = "MEMBER_SEQ", allocationSize = 1)//시퀀스 Column명으로 사용
public class Member {
@Id @GeneratedValue(strategy = GenerationType.TABLE,
            generator = "MEMBER_SEQ_GENERATOR")
    @Column(name = "MEMBER_ID")
    private Long id;
}
name   식별자  생성기 이름          필수
table 키생성 테이블명              hibernate_sequences
pkColumnName 시퀀스 컬럼명         sequence_name
valueColumnName 시퀀스 값 컬럼명   next_val
pkColumnValue 키로 사용할 값 이름   엔티티 이름