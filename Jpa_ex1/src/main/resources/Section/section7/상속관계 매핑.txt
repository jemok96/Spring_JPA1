관계형 데이터베이스는 상속 관계X
• 슈퍼타입 서브타입 관계라는 모델링 기법이 객체 상속과 유사
• 상속관계 매핑: 객체의 상속과 구조와 DB의 슈퍼타입 서브타입 관계를 매핑

만약 Item이라는 table이 있는데 이 Item 테이블에 모든 정보를 다 담아둘 것이냐
아니면 Movie,Album등 카테고리를 나눠서 공통된 부분은 Item으로 추상화 할 것이냐에따라 방식이 달라짐

1.조인 전략
Item을 상위클래스로 공통된 속성을 뽑아낸 후
Movice,Book,Album을 하위 클래스로 정한다.
@Inheritance(strategy=InheritanceType.JOIN)
• JOINED: 조인 전략
@DiscriminatorColumn(name=“DTYPE”)  => 상위 클래스에 지정해주면 insert시에 어떤 타입이 저장된지 알 수 있다 ex)Movie,Book
@DiscriminatorValue(“XXX”)    => 기본값은 entity명이 들어가는데 값을 바꾸고 싶다면 value를 지정
장점
• 테이블 정규화
• 외래 키 참조 무결성 제약조건 활용가능
• 저장공간 효율화
단점
• 조회시 조인을 많이 사용, 성능 저하   => 별 단점은 아닌듯..
• 조회 쿼리가 복잡함
• 데이터 저장시 INSERT SQL 2번 호출  => 별 단점은 아닌듯..
=> Join전략이 객체와 잘 맞는 전략인 것 같음


2. 싱글 테이블 전략
Item에 모든 속성을 몰아 넣는 전략
@Inheritance(strategy=InheritanceType.SINGLE_TABLE)
장점
• 조인이 필요 없으므로 일반적으로 조회 성능이 빠름
• 조회 쿼리가 단순함
단점
• 자식 엔티티가 매핑한 컬럼은 모두 null 허용 => 데이터 무결성 문제
• 단일 테이블에 모든 것을 저장하므로 테이블이 커질 수 있다. 상황에 따라서 조회 성능이 오히려 느려질 수 있다

3. 구현 클래스마다 테이블 전략
=> 이 전략은 DB설계자와 ORM전문가 둘 다 추천X => 사용하지말자