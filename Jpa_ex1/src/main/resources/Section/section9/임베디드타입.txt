임베디드 타입: 엔티티내에서 사용할 속성, 공통되는 속성을 class자체로 뽑아내는 것임
기본 값 타입을 모아서 만든 것이 JPA에서는 임베디드 타입이 하는 것

Member에
 id,name,startDate,endDate,city,street,zipcode
속성이 있다면 Period Class에 startDate, endDate 뽑아내서 Member 엔티티에서 Period자체로 사용하는 것
@Embeddable: 값 타입을 정의하는 곳에 표시
@Embedded: 값 타입을 사용하는 곳에 표시
기본 생성자 필수

임베디드 타입은 엔티티의 값일 뿐이다. equals() 재정의 해서 사용해야함
임베디드 타입을 사용하기 전과 후에 매핑하는 테이블은 같다

결론부터 이야기하면 상속보다는 위임입니다!

(다중상속도 안되고, 객체지향 설계상 유연성이 떨어지지요.)
그래서 가급적이면 MappedSuperclass는 보다는 임베디드를 사용하는 것이 좋습니다

@Embedded
private Address homeAddress;

@Embedded
@AttributeOverrides(value = AttributeOverride())
private Address workAddress;
한 엔티티에서 같은 값 타입을 사용하면 컬럼명이 중복됨 => @AttributeOverrides사용해서 재정의해줌


Address address = new Address("city", "street", "10000");

Member member1 = new Member();
member1.setHomeAddress(address);
member1.setUsername("JM");
em.persist(member1);

Member member2 = new Member();
member2.setHomeAddress(address);
member2.setUsername("JM");
em.persist(member2);

member2.getHomeAddress().setCity("New City");
절대 이렇게 사용 금지
Address newAddress = new Address("New city", address.get(), address.get());
이거를 넣어서 사용 = > 복사해서 사용해야함 but
객체 타입의 한계
객체 타입은 참조 값을 직접 대입하는 것을 막을 방법이 없다.
객체의 공유 참조는 피할 수 없다.   누군가 실수로 Address newAddress = address 했다면..?

=> 객체 타입을 수정할 수 없게(불변 객체) 설계해야함
불변 객체: 생성 시점 이후 절대 값을 변경할 수 없는 객체
생성자에서 초기화 하고, setter를 전부 지운다.
값을 바꾸고 싶을 때는 생성자 다시 만들어야함
Address newAddress = new Address("New city", address.get(), address.get());
member.setAddress(newAddress)

동일성(identity) 비교: 인스턴스의 참조 값을 비교, == 사용
• 동등성(equivalence) 비교: 인스턴스의 값을 비교, equals() 사용
• 값 타입은 a.equals(b)를 사용해서 동등성 비교를 해야 함